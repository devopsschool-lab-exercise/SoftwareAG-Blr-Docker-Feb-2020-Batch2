13.234.231.228
=======================================
1. Docker image consist of multiple layers.	DONE
2. Each layer is file system changes		DONE
3. Bottom layer is called rootfs which has file system similar to os filesystem. DONE
4. Any other layer on top of roofs, has changes such as Added, modified and deleted. DONE
^66- each layer has their parents layer. except rootfs
5. All these layers forming togther and called docker image aka docker repo. DONE
5. From one image, you can crearte multiple container.
6. Each container share the same image as base.
7. Images layers merged by Union mounts.
8. When there is conflict in layers, top layer always win.
9. When you crearte a container, union mounts merged all RO layers into ONE and mount to container 

with one RW empty layer.

[root@ip-172-31-22-218 docker]# ls -1
builder
buildkit
containers			- IT CONTAINs CONTAINER META INFO.
image				- IT CONTAINs IMAGE META INFO.
network
overlay2			- It contains All layers(image and containers)
plugins
runtimes
swarm
tmp
trust
volumes

 28  ls
   29  clear
   30  docker pull ubuntu
   31  clear
   32  ls
   33  docker inspect ubuntu
   34  ls
   35  clear
   36  ls
   37  docker images
   38  docker history ubuntu
   39  ls
   40  du -sh .
   41  du -s .
   42  du -h .
   43  du -h
   44  clear
   45  du -h --max-level=1
   46  du -h --max-depth=1
   47  du -s --max-depth=1
   48  du -sh --max-depth=1
   49  du -h --max-depth=1
   50  clear
   51  du -h --max-depth=1
   52  docker history ubuntu
   53  cd ./3d48b42c42890332243e8b74a9749c09a4dbb6ad1510bea4b1b644ab21b5ce9a
   54  ls
   55  clear
   56  ls
   57  cd diff
   58  ls
   59  cd ..
   60  ls
   61  cd ..
   62  ls
   63  clear
   64  ls
   65  ls
   66  cd 7964fa0b04073ccb096c9820737b73bf1cb664f6f06434e51655e7f670508b1b/diff/
   67  ls
   68  clear
   69  ls
   70  cd ..
   71  ls
   72  cd ..
   73  ls
   74  cd 3d48b42c42890332243e8b74a9749c09a4dbb6ad1510bea4b1b644ab21b5ce9a/diff/
   75  ls
   76  cd ..
   77  ls
   78  cd ..
   79  ls
   80  clear
   81  cd 98e3c1c19b2e801047243fd97e66d74dc3f1a4b50127e6bf3c2043e2b67b6dcb
   82  ls
   83  cd diff/
   84  ls
   85  cd etc/
   86  ls
   87  cd apt/
   88  ls
   89  clear
   90  ls
   91  cd ..
   92  cd /var/lib/docker/overlay2/
   93  ls
   94  clear
   95  ls
   96  cd ..
   97  ls
   98  cd containers/
   99  ls
  100  clear
  101  ls
  102  docker ps
  103  cd ..
  104  ls
  105  cd image/
  106  ls
  107  cd overlay2/
  108  clear
  109  ls
  110  du -sh
  111  cd ..
  112  ls
  113  cd ..
  114  ls
  115  docker run -itd ubuntu
  116  clearf
  117  clear
  118  ls
  119  cd containers/
  120  ls
  121  cd ..
  122  ls
  123  cd overlay2/
  124  clear
  125  ls
  126  df -kh
  127  cd c8364354e92c5a5087d93f811c47e485646fbbab010ec0fce3f798099d0b4fd8
  128  ls
  129  clear
  130  ls
  131  cd merged
  132  ls
  133  cd ..
  134  ls
  135  cd work
  136  ls
  137  cd work/
  138  ls
  139  cd ..
  140  ls
  141  cd ..
  142  ls
  143  cd diff/
  144  clear
  145  ls
  146  clear
  147  ls
  148  cd ..
  149  ls
  150  cd ..
  151  ls
  152  docker ps
  153  docker attach 8096e914cf85
  154  clear
  155  docker ps
  156  docker diff 8096e914cf85
  157  cd ..
  158  ls
  159  find . -name devopsschool.com
  160  docker ps
  161  docker stop 8096e914cf85
  162  df -kh
  163  find . -name devopsschool.com
  164  docker start 8096e914cf85
  165  find . -name devopsschool.com
  166  cd ./overlay2/c8364354e92c5a5087d93f811c47e485646fbbab010ec0fce3f798099d0b4fd8/diff
  167  ls
  168  cd etc/
  169  ls
  170  ls -a
  171  ls -la
  172  cd /opt
  173  ls
  174  cd -
  175  ls
  176  cd ..
  177  ls
  178  cd opt/
  179  ls
  180  ls
  181  cd ..
  182  ls
  183  cd ..
  184  ls
  185  cd work/
  186  ls
  187  cd work/
  188  ls
  189  cd ..
  190  ls
  191  cd ..
  192  ls
  193  history
===============================================
How to create image?
======================================================
2 Method - 
	Lazy way - Existing container.

203  cd /var/lib/
  204  clear
  205  cd docker
  206  cls
  207  ls
  208  cd overlay2/
  209  ls
  210  clear
  211  ls
  212  cd c8364354e92c5a5087d93f811c47e485646fbbab010ec0fce3f798099d0b4fd8
  213  ls
  214  cd diff/
  215  ls
  216  clear
  217  ls
  218  docker ps
  219  docker ps
  220  docker commit -m"first image" -a"Rajeshkumar" 8096e914cf85 image1
  221  ls
  222  cd ..
  223  ls
  224  cd ..
  225  ls
  226  clear
  227  ls
  228  ls -la
  229  clear
  230  ls
  231  ls -lrt
  232  clear
  233  ls
  234  docker ps
  235  docker stop 8096e914cf85
  236  docker rm 8096e914cf85
  237  clear
  238  ls
  239  cd 7b9a5cc8afac172c89931cac39c9ee0ed4729477d36cdb590ab286679f99ea35
  240  ls
  241  cd diff/
  242  clear
  243  ls
  244  docker images
  245  docker history image1
  246  docker history ubuntu
  247  clear
  248  docker images
  249  docker inspect image1
  250  clear
  251  ls
  252  clear
  253  history

How to share images?
============================
TAR BALL
===============
  278  docker images
  279  docker save -o ub-git.tar ub-git
  280  ls
  281  clear
  282  ls
  283  ;s
  284  ls
  285  docker ps -a
  286  docker stop e54e3597753a aa185c1312e3
  287  docker rm e54e3597753a aa185c1312e3
  288  clear
  289  docker ps -a
  290  docker images
  291  docker rmi ub-git
  292  ls
  293  clear
  294  docker images
  295  dls
  296  ls
  297  docker load -i ub-git.tar
  298  docker rmi image1 ubuntu ub-git
  299  clear
  300  docker images
  301  ls
  302  docker load -i ub-git.tar
  303  clear
  304  docker images
  305  history



PUBLIC repo
 303  clear
  304  docker images
  305  history
  306  clear
  307  ls
  308  docker images
  309  clear
  310  ls
  311  docker images
  312  docker login
  313  docker push ub-git
  314  clear
  315  docker imags
  316  docker images
  317  docker tag ub-git scmgalaxy/sgfeb2020
  318  docker images
  319  docker push scmgalaxy/sgfeb2020
  320  clear
  321  ls
  322  docker run -it ub-git
  323  docker ps
  324  docker commit -m"adding apache2" -a "rajeshkumr" 552421597eee ub-up-it-apache
  325  docker images
  326  docker tag ub-up-it-apache ub-git:apache
  327  docker images
  328  docker tag ub-up-it-apache scmgalaxy/sgfeb2020:apache
  329  docker push scmgalaxy/sgfeb2020
  330  docker images
  331  docker push scmgalaxy/sgfeb2020:apache
  332  history



PRIVATE REPO


	Automated - Using Dockerfile
======================================
Which port jenkins container run - 8080
which user jenkins container run - jenkins
What env var has been set in jenkins containers.
What is the volume mounted inside a container - /var/jenkins_home
Every image - you need rootfs

jenkins	
	openjdk:8-jdk
		buildpack-deps:buster-scm
			buildpack-deps:buster-curl
					debian:buster
						scratch
=====================================================
RULES OF DOCKERFILE
1. MUST HAVE ONE ROOFFS(using FROM)
2. EACH LINE - WOULD CREATE ONE LAYER
3. NEXT LAYER WOULD BE CREATED FROM CONtAINER of PREVIOUS LAYER


FROM ubuntu
MAINTAINER RAJESH KUMAR DEVOPS@RAJESHKUMAR.xyz
RUN touch /opt/rajesh1.txt
RUN touch /opt/rajesh2.txt
RUN touch /opt/rajesh3.txt

[root@ip-172-31-22-218 raj]# docker build -t raj1 .
Sending build context to Docker daemon  2.048kB
Step 1/5 : FROM ubuntu
 ---> 72300a873c2c
Step 2/5 : MAINTAINER RAJESH KUMAR DEVOPS@RAJESHKUMAR.xyz
 ---> Running in e8604f3146a1
Removing intermediate container e8604f3146a1
 ---> deedb8263b82
Step 3/5 : RUN touch /opt/rajesh1.txt
 ---> Running in dfd9739ebdbb
Removing intermediate container dfd9739ebdbb
 ---> 6c0ff141a36d
Step 4/5 : RUN touch /opt/rajesh2.txt
 ---> Running in 4e29f12f8da6
Removing intermediate container 4e29f12f8da6
 ---> cffd9ccd233d
Step 5/5 : RUN touch /opt/rajesh3.txt
 ---> Running in 3be5236c8268
Removing intermediate container 3be5236c8268
 ---> a7cb6195ec81
Successfully built a7cb6195ec81
Successfully tagged raj1:latest

FROM ubuntu
MAINTAINER RAJESH KUMAR DEVOPS@RAJESHKUMAR.xyz
RUN apt-get update && apt-get install git -y && apt-get install apache2
RUN 
RUN 

  375  docker build -t raj1 .

=================================================
1	13.232.240.122
2	13.233.130.218
3	13.126.215.216
4	13.126.239.3
5	13.233.127.181
6	13.233.16.89
7	13.235.16.129
8	13.233.123.97
9	13.126.180.225
10	15.206.74.104
11	15.206.81.235
12	13.126.66.27
13	15.206.66.124
14	13.127.107.189
15	3.6.90.46
16	13.232.60.189
17	15.206.158.227
18	13.233.134.248
19	3.6.93.14
20	13.233.106.147

============================================
Container are EPH.

Docker support VOLUME
		volume	/var/lib/docker/volumes
		mount	ANY WHERE IN HOST MACHINE
		tmpfs

https://www.devopsschool.com/tutorial/docker/
https://www.devopsschool.com/blog/understand-docker-volume-from-beginner-to-deep-dive-level/

   52  cd /var/lib/
   53  cd docker
   54  find . -name devopsschool.txt
   55  docker rm 05c7a198d45
   56  find . -name devopsschool.txt
   57  clear
   58  ls
   59  clear
   60  ls
   61  cd volumes/
   62  ls
   63  pwd
   64  cd 1e4e90a0e1c84fb5bddc0748d9167f96226b53f5434f86e1bfe069c987f820bc
   65  ls
   66  cd _data/
   67  ls
   68  clear
   69  ls
   70  clear
   71  cd ..
   72  ls
   73  cd ..
   74  ls
   75  docker run -d jenkins
   76  clear
   77  ls
   78  docker run -d jenkins
   79  ls
   80  docker ps -a
   81  docker stop 5773b5962309 91b219fd16f3
   82  docker rm  5773b5962309 91b219fd16f3
   83  ls
   84  clear
   85  ls
   86  docker volume
   87  docker volume ls
   88  docker volume rm c128f6010aa50d609eaf92adf20579b6e0c60f387f7c76f65ac62eff05788445
   89  docker volume ls
   90  clear
   91  docker volume
   92  docker volume prune
   93  docker volume
   94  docker volume ls
   95  ls
   96  docker volume create raj
   97  docker volume create dev
   98  ls
   99  clear
  100  ls
  101  docker volume ls
  102  docker run -it -v raj:/opt/rrr ubuntu
  103  clear
  104  ls
  105  cd raj/_data/
  106  ls
  107  touch rajesh.txt
  108  docker ps
  109  docker attach 2b865a5b07d8
  110  clear
  111  ls
  112  cd ..
  113  ls
  114  c d ..
  115  ls
  116  cd ..
  117  ls
  118  clear
  119  docker ps
  120  docker stop 2b865a5b07d8
  121  docker rm 2b865a5b07d8
  122  ls
  123  cd raj/_data/
  124  ks
  125  ls
  126  clear
  127  docker run -itd -v raj:/opt/ddd ubuntu
  128  docker run -itd -v raj:/opt/dddd ubuntu
  129  docker ps
  130  docker exec b38066ef27f2 df -kh
  131  docker exec c0f637dec7a2 df -kh
  132  df -kh
  133  docker run -it -v raj:/opt ubuntu
  134  history

=====================================

HOW TO RUN CONTAINER ---> PID 1---> IN DOCKERFILE?
=====================================
CMD
	CMD CAN BE REPLACED DURING RUN TIME.

ENTRYPOINT
	ENTRYPOINT CAN NOT BE REPLACED
	ARGUMENT applied during run time get added a parameter to ENTRYPOINT


	/bin/tini -- /usr/local/bin/jenkins.sh  
	/bin/tini -- /usr/local/bin/jenkins.sh rrrr  

https://www.devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html


Docker netoworking
========================================
	BRIDGE
	HOSTONLY
	NONE
	PLUGINS---- MANY MORE.



 179  docker network
  180  docker network ls
  181  docker network inspect aa52af381960
  182  docker ps
  183  docker inspect 6f8f6d23a618 | grep -i ip
  184  docker ps
  185  ifconfig
  186  docker ps
  187  clear
  188  docker ps -a
  189  docker stop $(docker ps -a -q)
  190  docker rm $(docker ps -a -q)
  191  clear
  192  docker ps -a
  193  ifconfig
  194  clear
  195  docker run -itd ubuntu
  196  ifconfig
  197  clear
  198  docker network
  199  docker network create qa --driver=bridge
  200  docker network ls
  201  clear
  202  docker network ls
  203  docker inspect qa
  204  clear
  205  docker ps -a
  206  docker run -itd --net=qa ubuntu
  207  dockerps
  208  docker ps
  209  docker inspect 4bd6d4c01f62
  210  docker run -itd --net=host ubuntu
  211  docker run -itd --net=none ubuntu
  212  docker run -itd --net=host ubuntu
  213  docker ps
  214  history


http://bit.ly/374O0E9
======================================
How to get course Matertails?
==============================
Tutorials
https://www.devopsschool.com/tutorial/

HTML Slides
https://www.devopsschool.com/slides/

PDF
https://www.devopsschool.com/pdf/ 

NOTES 


Videos
https://www.youtube.com/channel/UCrXr49kBvXJeQMMl2693c4g
https://www.devopsschool.com/videos/

QA  
https://www.devopsschool.com/interview

DUMP
https://www.devopsschool.com/lms

EXAMPLE PRO
https://github.com/devops-school
https://github.com/orgs/devopsschool-sample-projects/dashboard
https://github.com/orgs/devopsschool-projects/dashboard
https://github.com/orgs/devopsschool-lab-exercise/dashboard
https://github.com/orgs/devopsschool-classroom/dashboard
https://github.com/orgs/devopsinstitute/dashboard

How to reach out to Trainer?
http://rajeshkumar.xyz/

==========================================









